import os
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QPushButton, QFileDialog, QTextEdit, QProgressBar
from PyQt5.QtCore import QThread, pyqtSignal, Qt

class ScanWorker(QThread):
    update_results_signal = pyqtSignal(str)  # Signal to send scan results back to the main thread
    update_progress_signal = pyqtSignal(int)  # Signal to send progress updates back to the main thread

    def __init__(self, directory_to_scan, yara_rules_path, parent=None):
        super().__init__(parent)
        self.directory_to_scan = directory_to_scan
        self.yara_rules_path = yara_rules_path

    def run(self):
        # Start both scans in sequence
        self.update_results_signal.emit("Scanning started...\n")
        self.run_clamav_scan()
        self.run_yara_scan()

        # After scans are done, send progress update
        self.update_progress_signal.emit(100)  # Indicate scan completion

    def run_clamav_scan(self):
        self.update_results_signal.emit("Running ClamAV scan...\n")
        command = f"clamscan -r {self.directory_to_scan}"
        result = os.popen(command).read()
        self.update_results_signal.emit(f"ClamAV Results:\n{result}\n")

    def run_yara_scan(self):
        self.update_results_signal.emit("Running YARA scan...\n")
        yara_rules_path = self.yara_rules_path  # Use the path passed to the worker

        if not os.path.exists(yara_rules_path):
            self.update_results_signal.emit(f"YARA rules directory not found: {yara_rules_path}\n")
            return

        command = f"yara -r {yara_rules_path} {self.directory_to_scan}"
        result = os.popen(command).read()
        self.update_results_signal.emit(f"YARA Results:\n{result}\n")


class MalwareScanTab(QWidget):
    def __init__(self):
        super().__init__()
        self.setLayout(QVBoxLayout())

        # Label and Select Directory Button
        self.label = QLabel("No directory selected")
        self.layout().addWidget(self.label)

        self.select_dir_button = QPushButton("Select Directory to Scan")
        self.select_dir_button.clicked.connect(self.select_directory)
        self.layout().addWidget(self.select_dir_button)

        # Scan Results Display
        self.results_display = QTextEdit()
        self.results_display.setReadOnly(True)
        self.layout().addWidget(self.results_display)

        # Start Scanning Button
        self.scan_button = QPushButton("Start Scan")
        self.scan_button.setEnabled(False)
        self.scan_button.clicked.connect(self.start_scan)
        self.layout().addWidget(self.scan_button)

        # Progress Bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 0)  # Indeterminate mode (no specific range)
        self.progress_bar.setVisible(False)  # Initially hidden
        self.layout().addWidget(self.progress_bar)

        # Directory path for scanning
        self.directory_to_scan = None
        self.yara_rules_path = os.path.expanduser("~/Desktop/ForensicPro/yara_rules/")  # Use expanded user path

    def select_directory(self):
        self.directory_to_scan = QFileDialog.getExistingDirectory(self, "Select Directory")
        if self.directory_to_scan:
            self.label.setText(f"Selected directory: {self.directory_to_scan}")
            self.scan_button.setEnabled(True)

    def start_scan(self):
        if self.directory_to_scan:
            self.results_display.append("Scanning started...\n")
            self.progress_bar.setVisible(True)  # Show the progress bar
            self.progress_bar.setValue(0)  # Reset the progress bar value

            # Start scan in a separate thread using QThread
            self.scan_worker = ScanWorker(self.directory_to_scan, self.yara_rules_path)
            self.scan_worker.update_results_signal.connect(self.update_results)  # Connect result update signal
            self.scan_worker.update_progress_signal.connect(self.update_progress)  # Connect progress update signal
            self.scan_worker.start()  # Start the worker thread

    def update_results(self, message):
        """ Slot to handle results update from the worker thread """
        self.results_display.append(message)

    def update_progress(self, value):
        """ Slot to update the progress bar from the worker thread """
        self.progress_bar.setValue(value)
        if value == 100:
            self.progress_bar.setVisible(False)  # Hide progress bar when finished
